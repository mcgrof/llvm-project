; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -mattr=+wavefrontsize32 -verify-machineinstrs < %s | FileCheck %s --check-prefix=GFX11-W32

; Test GFX11 WMMA with amdgpu_kernel (compute) calling convention
; This test is critical to prevent regression of compute kernel WMMA support

declare <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.f16(<16 x half>, <16 x half>, <8 x float>)
declare <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.bf16(<16 x i16>, <16 x i16>, <8 x float>)
declare <8 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu8(i1, <4 x i32>, i1, <4 x i32>, <8 x i32>, i1)
declare <8 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu4(i1, <2 x i32>, i1, <2 x i32>, <8 x i32>, i1)

; GFX11-W32-LABEL: test_wmma_f32_16x16x16_f16_kernel:
; GFX11-W32: v_wmma_f32_16x16x16_f16
define amdgpu_kernel void @test_wmma_f32_16x16x16_f16_kernel(
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <16 x half>, ptr addrspace(1) %a_ptr, align 32
  %b = load <16 x half>, ptr addrspace(1) %b_ptr, align 32
  %c = load <8 x float>, ptr addrspace(1) %c_ptr, align 32
  %res = call <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.f16(<16 x half> %a, <16 x half> %b, <8 x float> %c)
  store <8 x float> %res, ptr addrspace(1) %out, align 32
  ret void
}

; GFX11-W32-LABEL: test_wmma_f32_16x16x16_bf16_kernel:
; GFX11-W32: v_wmma_f32_16x16x16_bf16
define amdgpu_kernel void @test_wmma_f32_16x16x16_bf16_kernel(
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <16 x i16>, ptr addrspace(1) %a_ptr, align 32
  %b = load <16 x i16>, ptr addrspace(1) %b_ptr, align 32
  %c = load <8 x float>, ptr addrspace(1) %c_ptr, align 32
  %res = call <8 x float> @llvm.amdgcn.wmma.f32.16x16x16.bf16(<16 x i16> %a, <16 x i16> %b, <8 x float> %c)
  store <8 x float> %res, ptr addrspace(1) %out, align 32
  ret void
}

; GFX11-W32-LABEL: test_wmma_i32_16x16x16_iu8_kernel:
; GFX11-W32: v_wmma_i32_16x16x16_iu8
define amdgpu_kernel void @test_wmma_i32_16x16x16_iu8_kernel(
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <4 x i32>, ptr addrspace(1) %a_ptr, align 16
  %b = load <4 x i32>, ptr addrspace(1) %b_ptr, align 16
  %c = load <8 x i32>, ptr addrspace(1) %c_ptr, align 32
  %res = call <8 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu8(i1 0, <4 x i32> %a, i1 0, <4 x i32> %b, <8 x i32> %c, i1 0)
  store <8 x i32> %res, ptr addrspace(1) %out, align 32
  ret void
}

; GFX11-W32-LABEL: test_wmma_i32_16x16x16_iu4_kernel:
; GFX11-W32: v_wmma_i32_16x16x16_iu4
define amdgpu_kernel void @test_wmma_i32_16x16x16_iu4_kernel(
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <2 x i32>, ptr addrspace(1) %a_ptr, align 8
  %b = load <2 x i32>, ptr addrspace(1) %b_ptr, align 8
  %c = load <8 x i32>, ptr addrspace(1) %c_ptr, align 32
  %res = call <8 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu4(i1 0, <2 x i32> %a, i1 0, <2 x i32> %b, <8 x i32> %c, i1 0)
  store <8 x i32> %res, ptr addrspace(1) %out, align 32
  ret void
}
